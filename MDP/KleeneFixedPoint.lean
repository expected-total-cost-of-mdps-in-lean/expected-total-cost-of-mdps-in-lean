import Mathlib.Order.OmegaCompletePartialOrder
import Mathlib.SetTheory.Ordinal.FixedPointApproximants
import MDP.OmegaCompletePartialOrder

theorem iterate_succ {Œ± : Type*} (f : Œ± ‚Üí Œ±) (a : Œ±) (n : ‚Ñï) : f (f^[n] a) = f^[n.succ] a :=
  Eq.symm (Function.iterate_succ_apply' f n a)

theorem iterate_succ' {Œ± : Type*} (f : Œ± ‚Üí Œ±) (a : Œ±) (n : ‚Ñï) : f (f^[n] a) = f^[n] (f a) :=
  iterate_succ f a n

theorem KleeneFixedPoint' {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚Üío Œ±) (n : ‚Ñï) : f^[n] ‚ä• ‚â§ f^[n+1] ‚ä• := by
  induction n with
  | zero => simp only [Function.iterate_zero, id_eq, zero_add, Function.iterate_one, bot_le]
  | succ n ih =>
    rw [Function.iterate_succ_apply', Function.iterate_succ_apply']
    exact f.monotone ih

theorem Monotone.iterate_add {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚Üío Œ±) (n m : ‚Ñï) : f^[n] ‚ä• ‚â§ f^[n + m] ‚ä• := by
  rw [Function.iterate_add_apply]
  exact Monotone.iterate f.monotone n (OrderBot.bot_le _)

theorem Monotone.iterate_le {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚Üío Œ±) {n m : ‚Ñï} (h : n ‚â§ m) : f^[n] ‚ä• ‚â§ f^[m] ‚ä• := by
  obtain ‚ü®c, hc‚ü© := le_iff_exists_add.mp h
  rw [hc]
  exact Monotone.iterate_add f n c

theorem lfp_eq_iff {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚Üío Œ±) (a : Œ±) (h : f a = a) (h' : ‚àÄ b, f b ‚â§ b ‚Üí a ‚â§ b) : OrderHom.lfp f = a := by
  have p‚ÇÅ := OrderHom.lfp_le_fixed f h
  have p‚ÇÇ : a ‚â§ OrderHom.lfp f := OrderHom.le_lfp f h'
  exact (p‚ÇÅ.le_iff_eq.mp p‚ÇÇ).symm

theorem KleeneFixedPoint.ScottContinuous {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚Üío Œ±) {h : ScottContinuous f} : (OrderHom.lfp f) = (‚®Ün, f^[n] ‚ä•) :=
  let M := { f^[n] ‚ä• | n : ‚Ñï }
  let m := sSup M
  have : f m = m := by
    have p : IsLUB (f '' M) (f m) := (h (by use ‚ä•, 0 ; rfl ) (by
        intro a a_in_M b b_in_M
        simp_all [M]
        obtain ‚ü®n‚ÇÅ, a_in_M‚ü© := a_in_M
        obtain ‚ü®n‚ÇÇ, b_in_M‚ü© := b_in_M
        subst_eqs
        by_cases h' : n‚ÇÅ < n‚ÇÇ
        ¬∑ have := Monotone.iterate_le f h'.le
          use n‚ÇÇ
        ¬∑ have := Monotone.iterate_le f (not_lt.mp h')
          use n‚ÇÅ
      ) (isLUB_sSup M))
    have p‚ÇÅ : sSup (f '' M) = f m := IsLUB.sSup_eq p
    have p‚ÇÇ : (f '' M) ‚à™ {‚ä•} = M := by
      ext a
      simp_all [M]
      constructor
      ¬∑ intro h'
        cases h' <;> rename_i h'
        ¬∑ simp_all
          use 0
          simp
        ¬∑ obtain ‚ü®n, h'‚ü© := h'
          use n.succ
          simp_all [Function.iterate_succ_apply']
      ¬∑ simp_all
        intro n h'
        induction n with
        | zero => simp_all
        | succ n _ =>
          right
          use n
          simp_all [Function.iterate_succ_apply']
    have p‚ÇÉ : sSup (f '' M) = sSup M := by
      conv in sSup M => rw [‚Üêp‚ÇÇ]
      simp
    exact p‚ÇÅ.symm.trans p‚ÇÉ
  lfp_eq_iff f m this (by
    intro b h'
    simp only [sSup_le_iff, Set.mem_setOf_eq, forall_exists_index, forall_apply_eq_imp_iff, m, M]
    intro n
    induction n with
    | zero => simp only [Function.iterate_zero, id_eq, bot_le]
    | succ n ih =>
      rw [Function.iterate_succ_apply']
      exact (f.monotone ih).trans h')

theorem KleeneFixedPoint.OmegaCompletePartialOrder.Continuous {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚ÜíùíÑ Œ±) : (OrderHom.lfp f) = (‚®Ün, f^[n] ‚ä•) := by
  have f_iterate_mono d : Monotone (fun n ‚Ü¶ f^[n + d] ‚ä•) := by
    intro a b a_le_b
    dsimp only
    obtain ‚ü®c, h‚ü© := le_iff_exists_add.mp a_le_b
    rw [add_comm a, add_comm b]
    simp [h, Function.iterate_add_apply, Function.iterate_add_apply, Function.iterate_add_apply]
    exact Monotone.iterate f.monotone d (Monotone.iterate f.monotone a (OrderBot.bot_le _))
  let M : OmegaCompletePartialOrder.Chain Œ± := ‚ü®fun n ‚Ü¶ f^[n] ‚ä•, f_iterate_mono 0‚ü©
  have M_eq n : M n = f^[n] ‚ä• := rfl
  have M_map_eq n : M.map f n = f (f^[n] ‚ä•) := rfl
  have M_map : M.map f = ‚ü®fun n ‚Ü¶ f^[n.succ] ‚ä•, f_iterate_mono 1‚ü© := by
    dsimp only [OmegaCompletePartialOrder.Chain.map, OrderHom.comp, OrderHomClass.coe_coe,
      OrderHom.coe_mk, Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply, M]
    congr
    ext a
    exact iterate_succ' f ‚ä• a
  let m := OmegaCompletePartialOrder.œâSup M
  apply lfp_eq_iff f m
  ¬∑ apply (f.map_œâSup' M).trans
    apply le_antisymm
    ¬∑ apply OmegaCompletePartialOrder.œâSup_le_œâSup_of_le
      intro n
      use n + 1
      simp_all only [Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply,
        OmegaCompletePartialOrder.Chain.map_coe,
        OmegaCompletePartialOrder.ContinuousHom.coe_toOrderHom]
      exact (M_map_eq n).ge
    ¬∑ apply OmegaCompletePartialOrder.œâSup_le_œâSup_of_le
      intro n
      use n
      simp only [M_eq, OmegaCompletePartialOrder.Chain.map_coe,
        OmegaCompletePartialOrder.ContinuousHom.coe_toOrderHom, Function.comp_apply]
      rw [iterate_succ' f ‚ä• n]
      exact Monotone.iterate f.mono n (OrderBot.bot_le _)
  ¬∑ intro b h'
    simp [m, OmegaCompletePartialOrder.œâSup_le_iff]
    intro n
    rw [M_eq]
    induction n with
    | zero => simp only [Function.iterate_zero, id_eq, bot_le]
    | succ n ih =>
      rw [Function.iterate_succ_apply']
      exact (f.monotone ih).trans h'

lemma f_iterate_mono {Œ± : Type*} [Preorder Œ±] [OrderBot Œ±] (f : Œ± ‚Üío Œ±) (d : ‚Ñï) : Monotone (fun n ‚Ü¶ f^[n + d] ‚ä•) := by
    intro a b a_le_b
    dsimp only
    obtain ‚ü®c, h‚ü© := le_iff_exists_add.mp a_le_b
    rw [add_comm a, add_comm b]
    simp [h, Function.iterate_add_apply, Function.iterate_add_apply, Function.iterate_add_apply]
    exact Monotone.iterate f.monotone d (Monotone.iterate f.monotone a (OrderBot.bot_le _))


theorem KleeneFixedPoint.Pi.OmegaCompletePartialOrder.Continuous {Œ± Œ≤ : Type*} [CompleteLattice Œ≤] (f : (Œ± ‚Üí Œ≤) ‚ÜíùíÑ (Œ± ‚Üí Œ≤)) : (OrderHom.lfp f) = OmegaCompletePartialOrder.œâSup ‚ü®fun n ‚Ü¶ f^[n] ‚ä•, f_iterate_mono f 0‚ü© := by
  let M : OmegaCompletePartialOrder.Chain (Œ± ‚Üí Œ≤) := ‚ü®fun n ‚Ü¶ f^[n] ‚ä•, f_iterate_mono f 0‚ü©
  have M_eq n : M n = f^[n] ‚ä• := rfl
  have M_map_eq n : M.map f n = f (f^[n] ‚ä•) := rfl
  have M_map : M.map f = ‚ü®fun n ‚Ü¶ f^[n.succ] ‚ä•, f_iterate_mono f 1‚ü© := by
    dsimp only [OmegaCompletePartialOrder.Chain.map, OrderHom.comp, OrderHomClass.coe_coe,
      OrderHom.coe_mk, Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply, M]
    congr
    funext a
    simp
    exact iterate_succ' f ‚ä• a
  let m := OmegaCompletePartialOrder.œâSup M
  apply lfp_eq_iff f m
  ¬∑ apply (f.map_œâSup' M).trans
    apply le_antisymm
    ¬∑ apply OmegaCompletePartialOrder.œâSup_le_œâSup_of_le
      intro n
      use n + 1
      simp_all only [Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply,
        OmegaCompletePartialOrder.Chain.map_coe,
        OmegaCompletePartialOrder.ContinuousHom.coe_toOrderHom]
      exact (M_map_eq n).ge
    ¬∑ apply OmegaCompletePartialOrder.œâSup_le_œâSup_of_le
      intro n
      use n
      simp only [M_eq, OmegaCompletePartialOrder.Chain.map_coe,
        OmegaCompletePartialOrder.ContinuousHom.coe_toOrderHom, Function.comp_apply]
      rw [iterate_succ' f ‚ä• n]
      exact Monotone.iterate f.mono n (OrderBot.bot_le _)
  ¬∑ intro b h'
    simp [m, OmegaCompletePartialOrder.œâSup_le_iff]
    intro n
    rw [M_eq]
    induction n with
    | zero => simp only [Function.iterate_zero, id_eq, bot_le]
    | succ n ih =>
      rw [Function.iterate_succ_apply']
      exact (f.monotone ih).trans h'

theorem KleeneFixedPoint.Pi.Continuous' {Œ± Œ≤ : Type*} [CompleteLattice Œ≤] (f : (Œ± ‚Üí Œ≤) ‚Üío (Œ± ‚Üí Œ≤)) (hf : OmegaCompletePartialOrder.Continuous' f) : (OrderHom.lfp f) = OmegaCompletePartialOrder.œâSup ‚ü®fun n ‚Ü¶ f^[n] ‚ä•, f_iterate_mono f 0‚ü© := by
  exact KleeneFixedPoint.Pi.OmegaCompletePartialOrder.Continuous ‚ü®f, OmegaCompletePartialOrder.continuous'_coe.mp hf‚ü©


theorem KleeneFixedPoint {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚ÜíùíÑ Œ±) : OrderHom.lfp f = ‚®Ün, f^[n] ‚ä• :=
  KleeneFixedPoint.OmegaCompletePartialOrder.Continuous f


theorem KleeneFixedPoint_succ {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚ÜíùíÑ Œ±) : OrderHom.lfp f = ‚®Ü(n : ‚Ñï), f^[n.succ] ‚ä• := by
  rw [KleeneFixedPoint f]
  have := sup_iSup_nat_succ (fun n ‚Ü¶ f^[n] ‚ä•)
  simp_all only [Function.iterate_zero, id_eq, Function.iterate_succ, Function.comp_apply,
    ge_iff_le, bot_le, sup_of_le_right, Nat.succ_eq_add_one]

theorem KleeneFixedPoint_succ' {Œ± : Type*} [CompleteLattice Œ±] (f : Œ± ‚Üío Œ±) (hf : OmegaCompletePartialOrder.Continuous' f) : OrderHom.lfp f = ‚®Ü(n : ‚Ñï), f^[n.succ] ‚ä• :=
  KleeneFixedPoint_succ ‚ü®f, hf.to_bundled‚ü©

theorem KleeneFixedPoint.Pi.succ {Œ± Œ≤ : Type*} [CompleteLattice Œ≤] (f : (Œ± ‚Üí Œ≤) ‚ÜíùíÑ (Œ± ‚Üí Œ≤)) : OrderHom.lfp f = OmegaCompletePartialOrder.œâSup ‚ü®fun (n : ‚Ñï) ‚Ü¶ f^[n.succ] ‚ä•, f_iterate_mono f 1‚ü© := by
  rw [KleeneFixedPoint.Pi.OmegaCompletePartialOrder.Continuous f]
  -- simp
  apply le_antisymm
  ¬∑ apply OmegaCompletePartialOrder.œâSup_le_œâSup_of_le
    intro n
    use n
    exact Monotone.iterate f.mono n (OrderBot.bot_le _)
  ¬∑ apply OmegaCompletePartialOrder.œâSup_le_œâSup_of_le
    intro n
    use n + 1
    simp_all only [Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply,
      OmegaCompletePartialOrder.Chain.map_coe,
      OmegaCompletePartialOrder.ContinuousHom.coe_toOrderHom]
    apply Preorder.le_refl

  -- have := sup_iSup_nat_succ (fun n ‚Ü¶ f^[n] ‚ä•)
  -- simp_all only [Function.iterate_zero, id_eq, Function.iterate_succ, Function.comp_apply,
  --   ge_iff_le, bot_le, sup_of_le_right, Nat.succ_eq_add_one]

theorem KleeneFixedPoint.Pi.succ' {Œ± Œ≤ : Type*} [CompleteLattice Œ≤] (f : (Œ± ‚Üí Œ≤) ‚Üío (Œ± ‚Üí Œ≤)) (hf : OmegaCompletePartialOrder.Continuous' f) : OrderHom.lfp f = OmegaCompletePartialOrder.œâSup ‚ü®fun (n : ‚Ñï) ‚Ü¶ f^[n.succ] ‚ä•, f_iterate_mono f 1‚ü© :=
  KleeneFixedPoint.Pi.succ ‚ü®f, hf.to_bundled‚ü©

theorem KleeneFixedPoint.Pi.succ'_iSup {Œ± Œ≤ : Type*} [CompleteLattice Œ≤] (f : (Œ± ‚Üí Œ≤) ‚Üío (Œ± ‚Üí Œ≤)) (hf : OmegaCompletePartialOrder.Continuous' f) : OrderHom.lfp f = iSup (fun (n : ‚Ñï) ‚Ü¶ f^[n.succ] ‚ä•) := by
  rw [KleeneFixedPoint.Pi.succ', ‚ÜêOmegaCompletePartialOrder.Pi.iSup_eq_œâSup]
  simp only [Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply, OrderHom.coe_mk]
  exact hf

theorem KleeneFixedPoint.Pi.iSup {Œ± Œ≤ : Type*} [CompleteLattice Œ≤] (f : (Œ± ‚Üí Œ≤) ‚Üío (Œ± ‚Üí Œ≤)) (hf : OmegaCompletePartialOrder.Continuous' f) : OrderHom.lfp f = iSup (fun (n : ‚Ñï) ‚Ü¶ f^[n] ‚ä•) := by
  rw [KleeneFixedPoint.Pi.Continuous', ‚ÜêOmegaCompletePartialOrder.Pi.iSup_eq_œâSup]
  simp only [Nat.succ_eq_add_one, Function.iterate_succ, Function.comp_apply, OrderHom.coe_mk]
  exact hf

-- theorem KleeneFixedPoint_succ'' {Œ± Œ≤ : Type*} [CompleteLattice (Œ± ‚Üí Œ≤)] (f : ((a : Œ±) ‚Üí Œ≤ a) ‚Üío ((a : Œ±) ‚Üí Œ≤ a)) (hf : @OmegaCompletePartialOrder.Continuous' _ _ _ Pi.instCompleteLattice f) : OrderHom.lfp f = ‚®Ü(n : ‚Ñï), f^[n.succ] ‚ä• := by
--   -- have : OmegaCompletePartialOrder ((a : Œ±) ‚Üí Œ≤ a) := Pi.instOmegaCompletePartialOrderForall
--   have : CompleteLattice ((a : Œ±) ‚Üí Œ≤ a) := Pi.instCompleteLattice
--   have := @KleeneFixedPoint ((a : Œ±) ‚Üí Œ≤ a) this ‚ü®f, hf.to_bundled‚ü©
--   rw [KleeneFixedPoint ‚ü®f, hf.to‚ü©]
--   apply KleeneFixedPoint_succ'
--   exact hf
  -- KleeneFixedPoint_succ ‚ü®f, hf.to_bundled‚ü©
